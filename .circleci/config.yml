---

version: 2.1
orbs:
  dotnet-sonarscanner: storytel/dotnet-sonarscanner@1.4.3
jobs:
  sonarscan:
    docker:
      - image: openjdk:19-jdk-buster
    steps:
      - checkout
      - run:
          name: "Replace Sonarqube project version"
          command: |
            ls
            if [ ! -z "${VERSION}" ]
            then
                sed -i -e "s/<VERSION>/${VERSION}/" ./sonar-project.properties
            else
                sed -i -e "s/<VERSION>/UNKNOWN/" ./sonar-project.properties
            fi
            cat ./sonar-project.properties
      - run:
          name: "Install Java"
          command: |
            apt-get update
            apt-get install -y gnupg jq
            wget -qO - https://adoptopenjdk.jfrog.io/adoptopenjdk/api/gpg/key/public | apt-key add -
            apt-get install -y software-properties-common apt-transport-https
            add-apt-repository --yes https://adoptopenjdk.jfrog.io/adoptopenjdk/deb/
            apt-get update
            apt-get install -y adoptopenjdk-13-hotspot
      - run:
          name: "Install SonarScanner for .NET"
          command: |
            wget https://packages.microsoft.com/config/debian/11/packages-microsoft-prod.deb -O packages-microsoft-prod.deb
            dpkg -i packages-microsoft-prod.deb
            rm packages-microsoft-prod.deb

            apt-get update
            apt-get install -y apt-transport-https && \
            apt-get update && \
            apt-get install -y dotnet-sdk-6.0 dotnet-runtime-6.0
            dotnet tool install --global dotnet-sonarscanner
            echo 'export PATH="$PATH:/root/.dotnet/tools"' >> $BASH_ENV
      - run:
          name: sonar-scan
          command: |
            echo "$SONAR_TOKEN"
            dotnet sonarscanner begin \
            /k:"worldboxpp" \
            /d:sonar.host.url="https://sonarcloud.io" \
            /d:sonar.login="$SONAR_TOKEN"\
            /d:sonar.sources="/tmp/project"
            /d:sonar.verbose=true
      - run:
          name: sonar-end
          command: |
            dotnet sonarscanner end /d:sonar.login=$Env:SONAR_TOKEN

  deploy:
    environment:
      RC_VERSION: 1
    docker:
      # Primary container image where all steps run
      - image: alpine
    steps:
      - checkout
      - run:
          name: State and list
          command: |
            echo 'Creating .mod file'
            ls
      - run:
          name: Version number
          command: |
            if [ "$CIRCLE_BRANCH" = "master" ]
            then
                sed -i -e "4 s/<VERSION>/${VERSION}/" mod.json
            elif [ "$CIRCLE_BRANCH" = "staging" ]
            then
                sed -i -e "4 s/<VERSION>/${VERSION}RC${RC_VERSION}/" mod.json
            elif [ ! -z "$CIRCLE_PULL_REQUEST" ]
            then
                sed -i -e "4 s/<VERSION>/${VERSION}RC${RC_VERSION}PR${CIRCLE_PULL_REQUEST##*/}/" mod.json
            else
                sed -i -e "4 s/<VERSION>/COM-${CIRCLE_SHA1}/" mod.json
            fi
      - run:
          name: Change structure
          command: |
            mkdir ./deploy
            echo 'Copying mod.json'
            cp mod.json ./deploy/mod.json
            echo 'Copying GameResources'
            cp -R ./GameResources ./deploy/GameResources
            echo 'Copying Embedded Resources'
            cp -R ./EmbeddedResources ./deploy/EmbeddedResources
            mkdir ./deploy/Code
            find ./Code -iname '*.cs' -exec sh -c 'echo "Copying" $1 && cp {} ./deploy/Code' - {} \;
      - run:
          name: Package files
          command: |
            apk add zip
            echo "Creating mod file"
            mkdir /artifacts
            cd deploy
            zip -r '/artifacts/Worldbox++.mod' .
      - store_artifacts:
          path: /artifacts
workflows:
  Build and deploy:
    jobs:
      - sonarscan:
          context: SonarCloud
      - deploy:
          requires:
            - sonarscan
