---

version: 2.1
orbs:
  windows: circleci/windows@4.1.1
jobs:
  sonarscan:
    executor:
      name: windows/default
    steps:
      - checkout
      - run:
          name: Download SteamCMD
          command: |
            New-Item -Path "C:\" -Name "steamcmd" -ItemType "directory"
            Invoke-WebRequest -Uri https://steamcdn-a.akamaihd.net/client/installer/steamcmd.zip -outfile "C:\steamcmd.zip"
            Expand-Archive -LiteralPath "C:\steamcmd.zip" -DestinationPath "C:\steamcmd"
      - run:
          name: Install steam-totp
          command: |
            New-Item -Path "C:\" -Name "steam2fa" -ItemType "directory"
            cd C:\steam2fa
            npm init
            npm install steam-totp
            $code = echo "var SteamTotp = require('steam-totp'); var code = SteamTotp.generateAuthCode('$Env:STEAM3'); console.log(code)" | node
            echo $code > C:\code
      - run:
          name: Download WorldBox
          command: |
            set-itemproperty 'HKCU:\Software\Microsoft\Windows\CurrentVersion\Internet Settings' -name AutoConfigURL -value 'proxy address'
            $key = 'HKCU:\Software\Microsoft\Windows\CurrentVersion\Internet Settings\Connections'
            [byte[]]$data = (Get-ItemProperty -Path $key).DefaultConnectionSettings
            $data[8] = 9
            Set-ItemProperty -Path $key -Name DefaultConnectionSettings -Value $data

            $code = Get-Content C:\code
            C:\steamcmd\steamcmd +force_install_dir C:\worldbox +login $Env:STEAM1 $Env:STEAM2 $code +app_update 1206560 +quit
            cat C:\steamcmd\logs\stderr.txt
      - run:
          name: Download NCMS
          command: |
            New-Item -Path "C:\" -Name "NCMS" -ItemType "directory"
            Invoke-WebRequest -Uri https://denq04.github.io/ncms/static/files/ncms/ncms.1.5.1.zip -outfile "C:\ncms.zip"
            Expand-Archive -LiteralPath "C:\ncms.zip" -DestinationPath "C:\ncms"
      - run:
          name: Extract NCMS binaries
          command: |
            New-Item -Path "./lib" -Name "Release" -ItemType "directory"
            Copy-Item -Path "C:\ncms\*" -Destination "./lib/Release"
            Add-Type -LiteralPath "lib/Extractor.cs"
            [Extractor]::extractAssemblies("$pwd"+"\lib\Release\")
            Move-Item -Path "./lib/Release/Assemblies/*" -Destination "./lib/Release"
            Remove-Item "./lib/Release/Assemblies"
      - run:
          name: Move Worldbox binaries
          command: |
            Copy-Item -Path "C:\worldbox\worldbox_Data\Managed\*" -Destination "./lib/Release"
            ls ./lib/Release
      - run:
          name: "Install SonarScanner for .NET"
          command: |
            dotnet tool install --global dotnet-sonarscanner
      - run:
          name: Begin sonar scan
          command: |
            $URL = "https://sonarcloud.io"
            dotnet sonarscanner begin /k:"worldboxpp" /d:sonar.host.url=$URL /d:sonar.login=$Env:SONAR_TOKEN /d:sonar.sources="/tmp/project" /o:"apolo49" /v:"$Env:VERSION"
      - run:
          name: Build dll
          command: |
            dotnet build "WorldBox++.csproj"
            dotnet build "worldboxpp.sln"
      - run:
          name: End sonar scan
          command: |
            dotnet sonarscanner end /d:sonar.login="$Env:SONAR_TOKEN"

  deploy:
    environment:
      RC_VERSION: 1
    docker:
      # Primary container image where all steps run
      - image: alpine
    steps:
      - checkout
      - run:
          name: State and list
          command: |
            echo 'Creating .mod file'
            ls
      - run:
          name: Version number
          command: |
            if [ "$CIRCLE_BRANCH" = "master" ]
            then
                sed -i -e "4 s/<VERSION>/${VERSION}/" mod.json
            elif [ "$CIRCLE_BRANCH" = "staging" ]
            then
                sed -i -e "4 s/<VERSION>/${VERSION}RC${RC_VERSION}/" mod.json
            elif [ ! -z "$CIRCLE_PULL_REQUEST" ]
            then
                sed -i -e "4 s/<VERSION>/${VERSION}RC${RC_VERSION}PR${CIRCLE_PULL_REQUEST##*/}/" mod.json
            else
                sed -i -e "4 s/<VERSION>/COM-${CIRCLE_SHA1}/" mod.json
            fi

      - run:
          name: Change structure
          command: |
            mkdir ./deploy
            echo 'Copying mod.json'
            cp mod.json ./deploy/mod.json
            echo 'Copying GameResources'
            cp -R ./GameResources ./deploy/GameResources
            echo 'Copying Embedded Resources'
            cp -R ./EmbeddedResources ./deploy/EmbeddedResources
            mkdir ./deploy/Code
            find ./Code -iname '*.cs' -exec sh -c 'echo "Copying" $1 && cp {} ./deploy/Code' - {} \;
      - run:
          name: Package files
          command: |
            apk add zip
            echo "Creating mod file"
            mkdir /artifacts
            cd deploy
            zip -r '/artifacts/Worldbox++.mod' .
      - store_artifacts:
          path: /artifacts
      - when:
          condition:
            equal: [main, << pipeline.git.branch >> ]
          steps:
            - run:
                name: Upload to github
                command: |
                  curl -X post -H "Authorization: token $GITHUB_TOKEN" -H "Content-Type: $(file -b -mime-type )"


workflows:
  Build and deploy:
    jobs:
      - sonarscan:
          context: SonarCloud
      - deploy:
          requires:
            - sonarscan
